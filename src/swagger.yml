openapi: 3.0.0
info:
  title: RentX Documentation
  description: This is an API Rent
  contact:
    email: apaulanazarenonoleto@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: Category
    description: Operations about car categories

  - name: User
    description: Operations about users

  - name: Specification
    description: Operations about car specifications
paths:
  /categories:
    post:
      tags:
        - Category
      summary: Create a category
      description: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid ID supplied

        "405":
          description: Invalid input
    get:
      tags:
        - Category
      summary: List all the categories
      description: List all the categories
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
  /categories/import:
    post:
      tags:
        - Category
      summary: Upload a new category
      description: Upload a new category
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created

  /specifications:
    post:
      tags:
        - Specification
      summary: Create a specification
      description: "Create a new Specification"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Specification"
      responses:
        "201":
          description: Created
        "500":
          description: Specification already exists

    # /user:
    #   post:
    #     tags:
    #       - User
    #     summary: Create user
    #     description: This can only be done by the logged in user.
    #     operationId: createUser
    #     requestBody:
    #       description: Created user object
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/User"
    #         application/xml:
    #           schema:
    #             $ref: "#/components/schemas/User"
    #         application/x-www-form-urlencoded:
    #           schema:
    #             $ref: "#/components/schemas/User"
    #     responses:
    #       default:
    #         description: successful operation
    #         content:
    #           application/json:
    #             schema:
    #               $ref: "#/components/schemas/User"
    #           application/xml:
    #             schema:
    #               $ref: "#/components/schemas/User"
    # /user/createWithList:
    #   post:
    #     tags:
    #       - User
    #     summary: Creates list of users with given input array
    #     description: Creates list of users with given input array
    #     operationId: createUsersWithListInput
    #     requestBody:
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: "#/components/schemas/User"
    #     responses:
    #       "200":
    #         description: Successful operation
    #         content:
    #           application/json:
    #             schema:
    #               $ref: "#/components/schemas/User"
    #           application/xml:
    #             schema:
    #               $ref: "#/components/schemas/User"
    #       default:
    #         description: successful operation
    # /user/login:
    #   get:
    #     tags:
    #       - User
    #     summary: Logs user into the system
    #     description: ""
    #     operationId: loginUser
    #     parameters:
    #       - name: username
    #         in: query
    #         description: The user name for login
    #         required: false
    #         schema:
    #           type: string
    #       - name: password
    #         in: query
    #         description: The password for login in clear text
    #         required: false
    #         schema:
    #           type: string
    #     responses:
    #       "200":
    #         description: successful operation
    #         headers:
    #           X-Rate-Limit:
    #             description: calls per hour allowed by the user
    #             schema:
    #               type: integer
    #               format: int32
    #           X-Expires-After:
    #             description: date in UTC when token expires
    #             schema:
    #               type: string
    #               format: date-time
    #         content:
    #           application/xml:
    #             schema:
    #               type: string
    #           application/json:
    #             schema:
    #               type: string
    #       "400":
    #         description: Invalid username/password supplied
    # /user/logout:
    #   get:
    #     tags:
    #       - User
    #     summary: Logs out current logged in user session
    #     description: ""
    #     operationId: logoutUser
    #     parameters: []
    #     responses:
    #       default:
    #         description: successful operation
    # /user/{username}:
    # get:
    #   tags:
    #     - User
    #   summary: Get user by user name
    #   description: ""
    #   operationId: getUserByName
    #   parameters:
    #     - name: username
    #       in: path
    #       description: "The name that needs to be fetched. Use user1 for testing. "
    #       required: true
    #       schema:
    #         type: string
    #   responses:
    #     "200":
    #       description: successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/User"
    #         application/xml:
    #           schema:
    #             $ref: "#/components/schemas/User"
    #     "400":
    #       description: Invalid username supplied
    #     "404":
    #       description: User not found
    # put:
    #   tags:
    #     - user
    #   summary: Update user
    #   description: This can only be done by the logged in user.
    #   operationId: updateUser
    #   parameters:
    #     - name: username
    #       in: path
    #       description: name that need to be deleted
    #       required: true
    #       schema:
    #         type: string
    #   requestBody:
    #     description: Update an existent user in the store
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/User"
    #       application/xml:
    #         schema:
    #           $ref: "#/components/schemas/User"
    #       application/x-www-form-urlencoded:
    #         schema:
    #           $ref: "#/components/schemas/User"
    #   responses:
    #     default:
    #       description: successful operation
    # delete:
    #   tags:
    #     - user
    #   summary: Delete user
    #   description: This can only be done by the logged in user.
    #   operationId: deleteUser
    #   parameters:
    #     - name: username
    #       in: path
    #       description: The name that needs to be deleted
    #       required: true
    #       schema:
    #         type: string
    #   responses:
    #     "400":
    #       description: Invalid username supplied
    #     "404":
    #       description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 10
        name:
          type: string
          example: João
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        driver_license:
          type: string
          example: "12345"
        admin:
          type: boolean
          example: false
        avatar:
          type: string
          example: "adsjhfaj4565dhfdudfu-eu.png"

    Category:
      required:
        - name
        - description
      type: object
      properties:
        id:
          type: string
          example: 734255a8-5c8f-4b31-8201-431a9d0b5d80
        name:
          type: string
          example: Caminhão
        description:
          type: string
          example: Veículos de carga

    Specification:
      required:
        - name
        - description
      type: object
      properties:
        id:
          type: string
          example: 734255a8-5c8f-4b31-8201-431a9d0b5d80
        name:
          type: string
          example: Câmbio automático
        description:
          type: string
          example: Carro com câmbio automático
